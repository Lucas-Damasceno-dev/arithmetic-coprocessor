# Explica√ß√£o do C√≥digo Verilog para Opera√ß√µes com Matrizes 2x2

## Vis√£o Geral
Este projeto implementa opera√ß√µes de **soma** e **subtra√ß√£o** de matrizes 2x2 em uma FPGA, utilizando Verilog. As matrizes s√£o armazenadas em **fitas de 32 bits**, onde cada elemento ocupa 8 bits (1 byte). O resultado das opera√ß√µes √© exibido nos LEDs da placa FPGA, com a sele√ß√£o de elementos feita via chaves (`Sw`).

## 1. M√≥dulo `top.v` (M√≥dulo Principal)
Este m√≥dulo gerencia as entradas e sa√≠das da FPGA, chamando os m√≥dulos de soma e subtra√ß√£o e exibindo os resultados corretamente.

### **Entradas e Sa√≠das:**
- **`Key[0]`** ‚Üí Aciona a soma das matrizes.
- **`Key[1]`** ‚Üí Aciona a subtra√ß√£o das matrizes.
- **`Sw[1:0]`** ‚Üí Determina qual elemento da matriz ser√° exibido nos LEDs.
  - `00` ‚Üí Elemento `[0][0]`
  - `01` ‚Üí Elemento `[0][1]`
  - `10` ‚Üí Elemento `[1][0]`
  - `11` ‚Üí Elemento `[1][1]`
- **`Leds[7:0]`** ‚Üí Mostra o valor do elemento selecionado.

### **Matrizes Utilizadas:**
```verilog
wire [31:0] A = 32'b00000000000000010000001000000000;
wire [31:0] B = 32'b00000001000000100000000000000001;
```
Cada matriz √© representada por 32 bits:

| Bits (Posi√ß√£o) | Elemento da Matriz |
|--------------|----------------|
| `A[7:0]`   | `[0][0]` |
| `A[15:8]`  | `[0][1]` |
| `A[23:16]` | `[1][0]` |
| `A[31:24]` | `[1][1]` |

### **Chamada dos M√≥dulos de Opera√ß√£o:**
```verilog
wire [31:0] sum_result;
wire [31:0] sub_result;

sum_operation sum_inst (
    .A(A),
    .B(B),
    .C(sum_result)
);

sub_operation sub_inst (
    .A(A),
    .B(B),
    .C(sub_result)
);
```
Aqui, os m√≥dulos de soma e subtra√ß√£o s√£o instanciados para processar `A` e `B`, gerando `sum_result` e `sub_result`.

### **Multiplexador para Escolher a Opera√ß√£o:**
```verilog
assign result = (Key[0]) ? sum_result :
                (Key[1]) ? sub_result :
                32'b0; // Nenhuma opera√ß√£o ativa
```
Se `Key[0]` estiver pressionado, `result` recebe `sum_result`. Se `Key[1]` estiver pressionado, recebe `sub_result`. Se nenhum bot√£o for pressionado, `result` ser√° `0`.

### **Selecionando o Elemento a Ser Exibido nos LEDs:**
```verilog
always @(*) begin
    case (Sw)
        2'b00: Leds = result[7:0];   // Elemento [0][0]
        2'b01: Leds = result[15:8];  // Elemento [0][1]
        2'b10: Leds = result[23:16]; // Elemento [1][0]
        2'b11: Leds = result[31:24]; // Elemento [1][1]
        default: Leds = 8'b00000000; // Caso inv√°lido
    endcase
end
```
A sele√ß√£o de qual elemento da matriz ser√° exibido √© feita com base nas chaves (`Sw`).

---

## 2. M√≥dulo `sum_operation.v` (Soma de Matrizes)
Este m√≥dulo realiza a soma elemento a elemento das matrizes.

```verilog
module sum_operation(
    input wire [31:0] A,
    input wire [31:0] B,
    output [31:0] C
);

    assign C[7:0] = A[7:0] + B[7:0];
    assign C[15:8] = A[15:8] + B[15:8];
    assign C[23:16] = A[23:16] + B[23:16];
    assign C[31:24] = A[31:24] + B[31:24];

endmodule
```
Cada opera√ß√£o de soma √© feita separadamente para cada elemento da matriz.

---

## 3. M√≥dulo `sub_operation.v` (Subtra√ß√£o de Matrizes)
Este m√≥dulo realiza a subtra√ß√£o elemento a elemento das matrizes.

```verilog
module sub_operation(
    input wire [31:0] A,
    input wire [31:0] B,
    output [31:0] C
);

    assign C[7:0] = A[7:0] - B[7:0];
    assign C[15:8] = A[15:8] - B[15:8];
    assign C[23:16] = A[23:16] - B[23:16];
    assign C[31:24] = A[31:24] - B[31:24];

endmodule
```
A l√≥gica √© id√™ntica √† soma, mas com a opera√ß√£o de subtra√ß√£o.

---

## 4. Resumo
‚úÖ **O projeto permite realizar soma e subtra√ß√£o de matrizes 2x2 na FPGA.**  
‚úÖ **Os resultados s√£o exibidos nos LEDs, com sele√ß√£o de elementos via chaves.**  
‚úÖ **A estrutura modular facilita futuras expans√µes para matrizes maiores.**  

Se houver d√∫vidas, me avise! üöÄ

